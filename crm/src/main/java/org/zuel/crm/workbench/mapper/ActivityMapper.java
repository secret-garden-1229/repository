package org.zuel.crm.workbench.mapper;

import org.zuel.crm.workbench.domain.Activity;
import org.zuel.crm.workbench.domain.Clue;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Thu Mar 03 14:46:11 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Thu Mar 03 14:46:11 CST 2022
     */
    int insertSelective(Activity record);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Thu Mar 03 14:46:11 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);


    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity record);

    /**
     * 查看分页市场活动
     * @param map 查询条件
     * @return 分页的市场活动列表
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询记录的数量
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);


    /**
     * 根据ids来批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动的信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 保存修改的市场活动
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有的市场活动
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 根据id查找市场活动列表
     * @param ids
     * @return
     */
    List<Activity> selectActivitiesByIds(String[] ids);

    /**
     * 批量保存市场活动
     * @param activityList
     * @return
     */
    int insertActivitiesByList(List<Activity> activityList);

    /**
     * 根据市场活动id查询市场活动的详细详细
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询关联的市场活动的详细信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询id，把clueId关联的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据市场活动ids数组查询关联的市场活动的详细信息
     * @param id
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] id);

    /**
     * 根据ClueId查询，市场活动名称模糊查询
     * @param map
     * @return
     */
    List<Activity> selectActivityForConVertByNameClueId(Map<String ,Object> map);
}